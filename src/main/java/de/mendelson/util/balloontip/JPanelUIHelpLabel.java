//$Header: /oftp2/de/mendelson/util/balloontip/JPanelUIHelpLabel.java 8     14/06/22 10:05 Heller $
package de.mendelson.util.balloontip;

import de.mendelson.util.MecResourceBundle;
import java.awt.Font;
import javax.swing.JPanel;

/*
 * Copyright (C) mendelson-e-commerce GmbH Berlin Germany
 *
 * This software is subject to the license agreement set forth in the license.
 * Please read and agree to all terms before using this software. Other product
 * and brand names are trademarks of their respective owners.
 */
/**
 * Label that is embedded in a panel and contains a UI help mouse over to
 * display a help text
 *
 * @author S.Heller
 * @version $Revision: 8 $
 */
public class JPanelUIHelpLabel extends JPanel {
        
    /**This variable might not be necessary but is required for the 
     * integrated property editor of Netbeans
     * 
     */
    private boolean helpEnabled = true;

    /**
     * Creates new form JPanelUIHelpLabel
     */
    public JPanelUIHelpLabel() {
        initComponents();
    }

    /**
     * Sets the text to the embedded label
     */
    public void setText(String text) {
        if( this.jLabel != null ){
            this.jLabel.setText(text);
        }
    }
    
    /**Returns the text of the embedded label*/
    public String getText(){
        if( this.jLabel != null ){
            return( this.jLabel.getText());
        }else{
            return( "" );
        }
    }

    /**Allows to enable/disable the help icon*/
    public void setHelpEnabled( boolean helpEnabled){
        this.helpEnabled = helpEnabled;
        this.jPanelUIHelp.setVisible(helpEnabled);
    }
    
    /**Indicates if the help is enabled or not*/
    public boolean getHelpEnabled(){
        return( this.helpEnabled);
    }
    
    @Override
    public void setEnabled( boolean enabled ){
        super.setEnabled( enabled );
        this.jLabel.setEnabled(enabled);
        this.jPanelUIHelp.setEnabled( enabled );
    }
    
    
    /**
     * Sets the max tooltip width in pixel
     */
    public void setTooltipWidth(int maxTooltipWidth) {
        this.jPanelUIHelp.setTooltipWidth(maxTooltipWidth);
    }
    
     /**
     * Returns the current set max width of the tooltip
     */
    public int getTooltipWidth() {
        return (this.jPanelUIHelp.getTooltipWidth());
    }
    
    /**
     * Initializes the tooltip of the embedded help icon
     */
    @Override
    public void setToolTipText(String text) {
        this.jPanelUIHelp.setToolTipText(text);
    }
    
    /**
     * Initializes the tooltip of the embedded help icon
     */
    public void setToolTip(MecResourceBundle rb, String resourceKey) {
        this.jPanelUIHelp.setToolTip(rb, resourceKey);
    }

    @Override
    public void setFont( Font font ){
        super.setFont(font);
        if( this.jLabel != null ){
            this.jLabel.setFont(font);
        }
    }
    
    @Override
    public Font getFont(){
        if( this.jLabel != null ){
            return( this.jLabel.getFont());
        }else{
            return( super.getFont());
        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelUIHelp = new de.mendelson.util.balloontip.JPanelUIHelp();
        jLabel = new javax.swing.JLabel();
        jPanelSpacer = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        jPanelUIHelp.setMinimumSize(new java.awt.Dimension(20, 20));
        jPanelUIHelp.setPreferredSize(new java.awt.Dimension(20, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        add(jPanelUIHelp, gridBagConstraints);

        jLabel.setText("Label");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jLabel, gridBagConstraints);

        javax.swing.GroupLayout jPanelSpacerLayout = new javax.swing.GroupLayout(jPanelSpacer);
        jPanelSpacer.setLayout(jPanelSpacerLayout);
        jPanelSpacerLayout.setHorizontalGroup(
            jPanelSpacerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelSpacerLayout.setVerticalGroup(
            jPanelSpacerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        add(jPanelSpacer, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel;
    private javax.swing.JPanel jPanelSpacer;
    private de.mendelson.util.balloontip.JPanelUIHelp jPanelUIHelp;
    // End of variables declaration//GEN-END:variables
}
