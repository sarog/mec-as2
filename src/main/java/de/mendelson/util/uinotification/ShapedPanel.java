//$Header: /as2/de/mendelson/util/uinotification/ShapedPanel.java 1     10/05/22 12:57 Heller $
package de.mendelson.util.uinotification;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import javax.swing.JPanel;

/*
 * Copyright (C) mendelson-e-commerce GmbH Berlin Germany
 *
 * This software is subject to the license agreement set forth in the license.
 * Please read and agree to all terms before using this software.
 * Other product and brand names are trademarks of their respective owners.
 */
/**
 * Panel that contains the notification information
 *
 * @author S.Heller
 * @version $Revision: 1 $
 */
public class ShapedPanel extends JPanel {

    protected static final int TYPE_ROUNDED_EDGES_LEFT = 1;
    protected static final int TYPE_ROUNDED_EDGES_RIGHT = 2;
    protected static final int TYPE_NO_ROUNDED_EDGES = 3;
    private int type = TYPE_ROUNDED_EDGES_LEFT;
    
    /**
     * Creates new form ShapedPanel
     */
    public ShapedPanel() {
        initComponents();
    }

    /**Set the shape type, one of TYPE_ROUND_LEFT or TYPE_ROUND_RIGHT*/
    public void setType( int type ){
        this.type = type;
    }
    
    @Override
    protected void paintComponent(Graphics g) {        
        Graphics2D g2d = (Graphics2D) g.create();
        RenderingHints renderingHints = new RenderingHints(RenderingHints.KEY_RENDERING,
                RenderingHints.VALUE_RENDER_QUALITY);
        renderingHints.add(new RenderingHints(RenderingHints.KEY_INTERPOLATION,
                RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR));
        renderingHints.add(new RenderingHints(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON));
        renderingHints.add(new RenderingHints(RenderingHints.KEY_ALPHA_INTERPOLATION,
                RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY));
        renderingHints.add(new RenderingHints(RenderingHints.KEY_COLOR_RENDERING,
                RenderingHints.VALUE_COLOR_RENDER_QUALITY));
        renderingHints.add(new RenderingHints(RenderingHints.KEY_STROKE_CONTROL,
                RenderingHints.VALUE_STROKE_NORMALIZE));
        g2d.setRenderingHints(renderingHints);
        Color backgroundColor = getBackground();
        g2d.setColor(backgroundColor);
        int arc = 10;
        int width = getWidth();
        int height = getHeight();
        if( type != TYPE_NO_ROUNDED_EDGES){
            g2d.fillRoundRect( 0, 0, width, height, arc, arc );
        }
        if( this.type == TYPE_ROUNDED_EDGES_LEFT ){
            int offsetX = width/3;
            g2d.fillRect( offsetX, 0, width-offsetX, height);
        }else if( this.type == TYPE_ROUNDED_EDGES_RIGHT ){
            g2d.fillRect( 0, 0, width/3, height);
        }else{
            g2d.fillRect( 0, 0, width, height);
        }
        g2d.dispose();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
