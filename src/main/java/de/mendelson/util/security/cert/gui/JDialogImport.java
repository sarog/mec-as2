//$Header: /as2/de/mendelson/util/security/cert/gui/JDialogImport.java 6     2/11/23 15:53 Heller $
package de.mendelson.util.security.cert.gui;

import de.mendelson.util.MecResourceBundle;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;


/*
 * Copyright (C) mendelson-e-commerce GmbH Berlin Germany
 *
 * This software is subject to the license agreement set forth in the license.
 * Please read and agree to all terms before using this software.
 * Other product and brand names are trademarks of their respective owners.
 */
/**
 * Dialog to preselect what to import - a key or a certificate and how
 *
 * @author S.Heller
 * @version $Revision: 6 $
 */
public class JDialogImport extends JDialog {

    protected final static int SELECTION_CANCEL = 0;
    protected final static int SELECTION_IMPORT_CERTIFICATE = 1;
    protected final static int SELECTION_IMPORT_KEY = 2;
    private int selection = SELECTION_CANCEL;

    /**
     * ResourceBundle to localize the GUI
     */
    private final MecResourceBundle rb;
    private final MecResourceBundle rbCertificates;

    /**
     * Creates new form JDialogPartnerConfig
     *
     */
    public JDialogImport(JFrame parent) {
        super(parent, true);
        //load resource bundle
        try {
            this.rb = (MecResourceBundle) ResourceBundle.getBundle(
                    ResourceBundleImport.class.getName());
            this.rbCertificates = (MecResourceBundle) ResourceBundle.getBundle(
                    ResourceBundleCertificates.class.getName());
        } catch (MissingResourceException e) {
            throw new RuntimeException("Oops..resource bundle "
                    + e.getClassName() + " not found.");
        }
        this.setTitle(this.rb.getResourceString("title"));
        initComponents();
        this.setMultiresolutionIcons();
        this.getRootPane().setDefaultButton(this.jButtonOk);
    }

    /**
     * Overwrite the designers icons by multi resolution icons
     */
    private void setMultiresolutionIcons() {
        this.jLabelIcon.setIcon(
                new ImageIcon(JDialogCertificates.IMAGE_IMPORT_MULTIRESOLUTION.toMinResolution(32)));
        this.jLabelImageCert.setIcon(
                new ImageIcon(JDialogCertificates.IMAGE_CERTIFICATE.toMinResolution(24)));
        this.jLabelImageKey.setIcon(
                new ImageIcon(JDialogCertificates.IMAGE_KEY.toMinResolution(24)));
    }

    /**
     * @return the selection
     */
    public int getSelection() {
        return selection;
    }

    private void computeSelection() {
        if (this.jRadioButtonImportCertificate.isSelected()) {
            this.selection = SELECTION_IMPORT_CERTIFICATE;
        }        
        if (this.jRadioButtonImportKeyFromKeystore.isSelected()) {
            this.selection = SELECTION_IMPORT_KEY;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroupImport = new javax.swing.ButtonGroup();
        jPanelEdit = new javax.swing.JPanel();
        jLabelIcon = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jRadioButtonImportCertificate = new javax.swing.JRadioButton();
        jRadioButtonImportKeyFromKeystore = new javax.swing.JRadioButton();
        jLabelWhatToImport = new javax.swing.JLabel();
        jLabelImageCert = new javax.swing.JLabel();
        jLabelImageKey = new javax.swing.JLabel();
        jLabelImportCertificate = new javax.swing.JLabel();
        jLabelImportKeyFromKeystore = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanelButtons = new javax.swing.JPanel();
        jButtonOk = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanelEdit.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanelEdit.setLayout(new java.awt.GridBagLayout());

        jLabelIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/mendelson/util/security/cert/gui/missing_image32x32.gif"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanelEdit.add(jLabelIcon, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        jPanelEdit.add(jPanel3, gridBagConstraints);

        buttonGroupImport.add(jRadioButtonImportCertificate);
        jRadioButtonImportCertificate.setSelected(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        jPanelEdit.add(jRadioButtonImportCertificate, gridBagConstraints);

        buttonGroupImport.add(jRadioButtonImportKeyFromKeystore);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        jPanelEdit.add(jRadioButtonImportKeyFromKeystore, gridBagConstraints);

        jLabelWhatToImport.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        jLabelWhatToImport.setText(this.rb.getResourceString( "info.whattoimport")
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanelEdit.add(jLabelWhatToImport, gridBagConstraints);

        jLabelImageCert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/mendelson/util/security/cert/gui/missing_image24x24.gif"))); // NOI18N
        jLabelImageCert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelImageCertMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        jPanelEdit.add(jLabelImageCert, gridBagConstraints);

        jLabelImageKey.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/mendelson/util/security/cert/gui/missing_image24x24.gif"))); // NOI18N
        jLabelImageKey.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelImageKeyMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        jPanelEdit.add(jLabelImageKey, gridBagConstraints);

        jLabelImportCertificate.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabelImportCertificate.setText(this.rbCertificates.getResourceString( "label.cert.import"));
        jLabelImportCertificate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelImportCertificateMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelEdit.add(jLabelImportCertificate, gridBagConstraints);

        jLabelImportKeyFromKeystore.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabelImportKeyFromKeystore.setText(this.rbCertificates.getResourceString( "label.key.import"));
        jLabelImportKeyFromKeystore.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelImportKeyFromKeystoreMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelEdit.add(jLabelImportKeyFromKeystore, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 15, 5);
        jPanelEdit.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jPanelEdit, gridBagConstraints);

        jPanelButtons.setLayout(new java.awt.GridBagLayout());

        jButtonOk.setText(this.rb.getResourceString( "button.ok" ));
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanelButtons.add(jButtonOk, gridBagConstraints);

        jButtonCancel.setText(this.rb.getResourceString( "button.cancel" ));
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanelButtons.add(jButtonCancel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jPanelButtons, gridBagConstraints);

        setSize(new java.awt.Dimension(565, 278));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed
        this.computeSelection();
        this.setVisible(false);
    }//GEN-LAST:event_jButtonOkActionPerformed

    private void jLabelImageCertMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelImageCertMouseClicked
        this.jRadioButtonImportCertificate.setSelected(true);
    }//GEN-LAST:event_jLabelImageCertMouseClicked

    private void jLabelImportCertificateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelImportCertificateMouseClicked
        this.jRadioButtonImportCertificate.setSelected(true);
    }//GEN-LAST:event_jLabelImportCertificateMouseClicked

    private void jLabelImageKeyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelImageKeyMouseClicked
        this.jRadioButtonImportKeyFromKeystore.setSelected(true);
    }//GEN-LAST:event_jLabelImageKeyMouseClicked

    private void jLabelImportKeyFromKeystoreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelImportKeyFromKeystoreMouseClicked
        this.jRadioButtonImportKeyFromKeystore.setSelected(true);
    }//GEN-LAST:event_jLabelImportKeyFromKeystoreMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupImport;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JLabel jLabelIcon;
    private javax.swing.JLabel jLabelImageCert;
    private javax.swing.JLabel jLabelImageKey;
    private javax.swing.JLabel jLabelImportCertificate;
    private javax.swing.JLabel jLabelImportKeyFromKeystore;
    private javax.swing.JLabel jLabelWhatToImport;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelButtons;
    private javax.swing.JPanel jPanelEdit;
    private javax.swing.JRadioButton jRadioButtonImportCertificate;
    private javax.swing.JRadioButton jRadioButtonImportKeyFromKeystore;
    // End of variables declaration//GEN-END:variables

}
