//$Header: /as2/de/mendelson/comm/as2/preferences/PreferencesPanelMDN.java 23    2/08/22 14:04 Heller $
package de.mendelson.comm.as2.preferences;

import de.mendelson.util.JTextFieldLimitDocument;
import de.mendelson.util.MecResourceBundle;
import de.mendelson.util.MendelsonMultiResolutionImage;
import de.mendelson.util.clientserver.BaseClient;
import de.mendelson.util.clientserver.clients.preferences.PreferencesClient;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import javax.swing.ImageIcon;

/*
 * Copyright (C) mendelson-e-commerce GmbH Berlin Germany
 *
 * This software is subject to the license agreement set forth in the license.
 * Please read and agree to all terms before using this software.
 * Other product and brand names are trademarks of their respective owners.
 */
/**
 * Panel to define the MDN preferences
 *
 * @author S.Heller
 * @version: $Revision: 23 $
 */
public class PreferencesPanelMDN extends PreferencesPanel {

    /**
     * Localize the GUI
     */
    private MecResourceBundle rb = null;

    protected final static MendelsonMultiResolutionImage IMAGE_PREFS
            = MendelsonMultiResolutionImage.fromSVG("/de/mendelson/comm/as2/preferences/preferences.svg",
                    JDialogPreferences.IMAGE_HEIGHT);

    /**
     * GUI prefs
     */
    private PreferencesClient preferences;

    /**
     * Creates new form PreferencesPanelDirectories
     */
    public PreferencesPanelMDN(BaseClient baseClient) {
        //load resource bundle
        try {
            this.rb = (MecResourceBundle) ResourceBundle.getBundle(
                    ResourceBundlePreferences.class.getName());
        } catch (MissingResourceException e) {
            throw new RuntimeException("Oops..resource bundle "
                    + e.getClassName() + " not found.");
        }
        this.preferences = new PreferencesClient(baseClient);
        this.initComponents();
        //set the max string length that could be entered to 5 - these are 00000 to 99999
        this.jTextFieldAsyncMDNTimeout.setDocument(new JTextFieldLimitDocument(5));        
    }

    
    /**
     * Sets new preferences to this panel to changes/modify
     */
    @Override
    public void loadPreferences() {
        this.jTextFieldAsyncMDNTimeout.setText(this.preferences.get(PreferencesAS2.ASYNC_MDN_TIMEOUT));        
    }

    /**
     * Stores the preferences once the ok button has been pressed
     */
    @Override
    public void savePreferences() {
        try {
            int value = Integer.valueOf(this.jTextFieldAsyncMDNTimeout.getText().trim()).intValue();
            if( value < 0){
                value = Integer.valueOf( this.preferences.getDefaultValue(PreferencesAS2.ASYNC_MDN_TIMEOUT));
            }
            this.preferences.putInt(PreferencesAS2.ASYNC_MDN_TIMEOUT, value);
        } catch (NumberFormatException e) {
            //nop
        }        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelMargin = new javax.swing.JPanel();
        jPanelSpace = new javax.swing.JPanel();
        jPanelSpacer = new javax.swing.JPanel();
        jTextFieldAsyncMDNTimeout = new javax.swing.JTextField();
        jLabelMinutes = new javax.swing.JLabel();
        jPanelUIHelpLabelMDNTimeout = new de.mendelson.util.balloontip.JPanelUIHelpLabel();

        setLayout(new java.awt.GridBagLayout());

        jPanelMargin.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        jPanelMargin.add(jPanelSpace, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(15, 1, 1, 1);
        jPanelMargin.add(jPanelSpacer, gridBagConstraints);

        jTextFieldAsyncMDNTimeout.setMinimumSize(new java.awt.Dimension(50, 20));
        jTextFieldAsyncMDNTimeout.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelMargin.add(jTextFieldAsyncMDNTimeout, gridBagConstraints);

        jLabelMinutes.setText(this.rb.getResourceString( "label.min"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanelMargin.add(jLabelMinutes, gridBagConstraints);

        jPanelUIHelpLabelMDNTimeout.setToolTipText(this.rb.getResourceString( "label.asyncmdn.timeout.help"));
        jPanelUIHelpLabelMDNTimeout.setText(this.rb.getResourceString( "label.asyncmdn.timeout"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanelMargin.add(jPanelUIHelpLabelMDNTimeout, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPanelMargin, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelMinutes;
    private javax.swing.JPanel jPanelMargin;
    private javax.swing.JPanel jPanelSpace;
    private javax.swing.JPanel jPanelSpacer;
    private de.mendelson.util.balloontip.JPanelUIHelpLabel jPanelUIHelpLabelMDNTimeout;
    private javax.swing.JTextField jTextFieldAsyncMDNTimeout;
    // End of variables declaration//GEN-END:variables

    @Override
    public ImageIcon getIcon() {
        return (new ImageIcon(IMAGE_PREFS));
    }

    @Override
    public String getTabResource() {
        return ("tab.misc");
    }

}
