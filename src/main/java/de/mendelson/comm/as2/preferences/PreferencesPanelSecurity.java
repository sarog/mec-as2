//$Header: /as2/de/mendelson/comm/as2/preferences/PreferencesPanelSecurity.java 33    8/06/22 11:10 Heller $
package de.mendelson.comm.as2.preferences;

import de.mendelson.util.MecResourceBundle;
import de.mendelson.util.MendelsonMultiResolutionImage;
import de.mendelson.util.clientserver.BaseClient;
import de.mendelson.util.clientserver.clients.filesystemview.RemoteFileBrowser;
import de.mendelson.util.clientserver.clients.preferences.PreferencesClient;
import java.awt.Color;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

/*
 * Copyright (C) mendelson-e-commerce GmbH Berlin Germany
 *
 * This software is subject to the license agreement set forth in the license.
 * Please read and agree to all terms before using this software.
 * Other product and brand names are trademarks of their respective owners.
 */
/**
 * Panel to define the directory preferences
 *
 * @author S.Heller
 * @version: $Revision: 33 $
 */
public class PreferencesPanelSecurity extends PreferencesPanel {

    /**
     * Localize the GUI
     */
    private MecResourceBundle rb = null;

    /**
     * GUI prefs
     */
    private PreferencesClient preferences;
    private BaseClient baseClient;

    private final static MendelsonMultiResolutionImage ICON_CERTIFICATE
            = MendelsonMultiResolutionImage.fromSVG("/de/mendelson/comm/as2/preferences/certificate.svg",
                    JDialogPreferences.IMAGE_HEIGHT, JDialogPreferences.IMAGE_HEIGHT * 2);
    private final static MendelsonMultiResolutionImage ICON_WARNING_SIGN
            = MendelsonMultiResolutionImage.fromSVG("/de/mendelson/comm/as2/preferences/warning_sign.svg", 64, 128);

    /**
     * Creates new form PreferencesPanelDirectories
     */
    public PreferencesPanelSecurity(BaseClient baseClient) {
        //load resource bundle
        try {
            this.rb = (MecResourceBundle) ResourceBundle.getBundle(
                    ResourceBundlePreferences.class.getName());
        } catch (MissingResourceException e) {
            throw new RuntimeException("Oops..resource bundle "
                    + e.getClassName() + " not found.");
        }
        this.baseClient = baseClient;
        this.preferences = new PreferencesClient(baseClient);
        this.initComponents();
        this.jLabelSecurityHint.setIcon(new ImageIcon(ICON_WARNING_SIGN));
        this.jLabelSecurityHint.setText(this.rb.getResourceString("keystore.hint"));
        this.jLabelSecurityHint.setIconTextGap(20);
        this.jLabelSecurityHint.setForeground(Color.BLACK);
    }

    /**
     * Sets new preferences to this panel to changes/modify
     */
    @Override
    public void loadPreferences() {
        this.jTextFieldKeystoreHTTPS.setText(this.preferences.get(PreferencesAS2.KEYSTORE_HTTPS_SEND));
        this.jTextFieldKeystoreEncryptionSign.setText(this.preferences.get(PreferencesAS2.KEYSTORE));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelMargin = new javax.swing.JPanel();
        jTextFieldKeystoreHTTPS = new javax.swing.JTextField();
        jLabelKeystoreHTTPS = new javax.swing.JLabel();
        jButtonBrowseKeystoreHTTPS = new javax.swing.JButton();
        jLabelKeystoreEncryptionSign = new javax.swing.JLabel();
        jTextFieldKeystoreEncryptionSign = new javax.swing.JTextField();
        jPanelWarning = new javax.swing.JPanel();
        jLabelSecurityHint = new javax.swing.JLabel();
        jPanelSpace = new javax.swing.JPanel();
        jButtonBrowseKeystoreEncryptionSign = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jPanelMargin.setLayout(new java.awt.GridBagLayout());

        jTextFieldKeystoreHTTPS.setMinimumSize(new java.awt.Dimension(250, 22));
        jTextFieldKeystoreHTTPS.setPreferredSize(new java.awt.Dimension(250, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 5, 5);
        jPanelMargin.add(jTextFieldKeystoreHTTPS, gridBagConstraints);

        jLabelKeystoreHTTPS.setText(this.rb.getResourceString( "label.keystore.https"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 5, 5);
        jPanelMargin.add(jLabelKeystoreHTTPS, gridBagConstraints);

        jButtonBrowseKeystoreHTTPS.setText("..");
        jButtonBrowseKeystoreHTTPS.setToolTipText(this.rb.getResourceString( "button.browse"));
        jButtonBrowseKeystoreHTTPS.setMargin(new java.awt.Insets(2, 8, 2, 8));
        jButtonBrowseKeystoreHTTPS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseKeystoreHTTPSActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 5, 5);
        jPanelMargin.add(jButtonBrowseKeystoreHTTPS, gridBagConstraints);

        jLabelKeystoreEncryptionSign.setText(this.rb.getResourceString( "label.keystore.encryptionsign"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelMargin.add(jLabelKeystoreEncryptionSign, gridBagConstraints);

        jTextFieldKeystoreEncryptionSign.setMinimumSize(new java.awt.Dimension(250, 22));
        jTextFieldKeystoreEncryptionSign.setPreferredSize(new java.awt.Dimension(250, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelMargin.add(jTextFieldKeystoreEncryptionSign, gridBagConstraints);

        jPanelWarning.setBackground(new java.awt.Color(255, 255, 255));
        jPanelWarning.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanelWarning.setLayout(new java.awt.GridBagLayout());

        jLabelSecurityHint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/mendelson/comm/as2/preferences/missing_image32x32.gif"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanelWarning.add(jLabelSecurityHint, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(30, 15, 5, 15);
        jPanelMargin.add(jPanelWarning, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        jPanelMargin.add(jPanelSpace, gridBagConstraints);

        jButtonBrowseKeystoreEncryptionSign.setText("..");
        jButtonBrowseKeystoreEncryptionSign.setToolTipText(this.rb.getResourceString( "button.browse"));
        jButtonBrowseKeystoreEncryptionSign.setMargin(new java.awt.Insets(2, 8, 2, 8));
        jButtonBrowseKeystoreEncryptionSign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseKeystoreEncryptionSignActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelMargin.add(jButtonBrowseKeystoreEncryptionSign, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPanelMargin, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonBrowseKeystoreHTTPSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseKeystoreHTTPSActionPerformed
        JFrame parent = (JFrame) SwingUtilities.getAncestorOfClass(JFrame.class, this);
        RemoteFileBrowser browser = new RemoteFileBrowser(parent, this.baseClient,
                this.rb.getResourceString("filechooser.keystore"));
        browser.setDirectoriesOnly(false);
        browser.setSelectedFile(this.jTextFieldKeystoreHTTPS.getText());
        browser.setVisible(true);
        String selectedPath = browser.getSelectedPath();
        if (selectedPath != null && selectedPath.trim().length() > 0) {
            this.jTextFieldKeystoreHTTPS.setText(selectedPath);
        }
        this.preferences.put(PreferencesAS2.KEYSTORE_HTTPS_SEND, this.jTextFieldKeystoreHTTPS.getText());
    }//GEN-LAST:event_jButtonBrowseKeystoreHTTPSActionPerformed

    private void jButtonBrowseKeystoreEncryptionSignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseKeystoreEncryptionSignActionPerformed
        JFrame parent = (JFrame) SwingUtilities.getAncestorOfClass(JFrame.class, this);
        RemoteFileBrowser browser = new RemoteFileBrowser(parent, this.baseClient,
                this.rb.getResourceString("filechooser.keystore"));
        browser.setDirectoriesOnly(false);
        browser.setSelectedFile(this.jTextFieldKeystoreEncryptionSign.getText());
        browser.setVisible(true);
        String selectedPath = browser.getSelectedPath();
        if (selectedPath != null && selectedPath.trim().length() > 0) {
            this.jTextFieldKeystoreEncryptionSign.setText(selectedPath);
        }
        this.preferences.put(PreferencesAS2.KEYSTORE, this.jTextFieldKeystoreEncryptionSign.getText());
    }//GEN-LAST:event_jButtonBrowseKeystoreEncryptionSignActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBrowseKeystoreEncryptionSign;
    private javax.swing.JButton jButtonBrowseKeystoreHTTPS;
    private javax.swing.JLabel jLabelKeystoreEncryptionSign;
    private javax.swing.JLabel jLabelKeystoreHTTPS;
    private javax.swing.JLabel jLabelSecurityHint;
    private javax.swing.JPanel jPanelMargin;
    private javax.swing.JPanel jPanelSpace;
    private javax.swing.JPanel jPanelWarning;
    private javax.swing.JTextField jTextFieldKeystoreEncryptionSign;
    private javax.swing.JTextField jTextFieldKeystoreHTTPS;
    // End of variables declaration//GEN-END:variables

    @Override
    public void savePreferences() {
        this.preferences.put(PreferencesAS2.KEYSTORE_HTTPS_SEND, this.jTextFieldKeystoreHTTPS.getText());
        this.preferences.put(PreferencesAS2.KEYSTORE, this.jTextFieldKeystoreEncryptionSign.getText());
    }

    @Override
    public ImageIcon getIcon() {
        return (new ImageIcon(ICON_CERTIFICATE));

    }

    @Override
    public String getTabResource() {
        return ("tab.security");
    }

}
