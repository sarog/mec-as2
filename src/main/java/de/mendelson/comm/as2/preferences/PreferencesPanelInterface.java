//$Header: /mec_as2/de/mendelson/comm/as2/preferences/PreferencesPanelInterface.java 2     29/11/23 14:14 Heller $
package de.mendelson.comm.as2.preferences;

import de.mendelson.util.MecResourceBundle;
import de.mendelson.util.MendelsonMultiResolutionImage;
import de.mendelson.util.clientserver.BaseClient;
import de.mendelson.util.clientserver.clients.preferences.PreferencesClient;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import javax.swing.ImageIcon;

/*
 * Copyright (C) mendelson-e-commerce GmbH Berlin Germany
 *
 * This software is subject to the license agreement set forth in the license.
 * Please read and agree to all terms before using this software.
 * Other product and brand names are trademarks of their respective owners.
 */
/**
 * Panel to define the interface preferences
 *
 * @author S.Heller
 * @version: $Revision: 2 $
 */
public class PreferencesPanelInterface extends PreferencesPanel {

    private final static MendelsonMultiResolutionImage IMAGE_INTERFACE
            = MendelsonMultiResolutionImage.fromSVG("/de/mendelson/comm/as2/preferences/interface.svg",
                    JDialogPreferences.IMAGE_HEIGHT);

    private final MecResourceBundle rb;
    private final PreferencesClient preferences;
    private String preferencesStrAtLoadTime = "";

    /**
     * Creates new form PreferencesPanelDirectories
     */
    public PreferencesPanelInterface(BaseClient baseClient) {
        //load resource bundle
        try {
            this.rb = (MecResourceBundle) ResourceBundle.getBundle(
                    ResourceBundlePreferencesInterface.class.getName());
        } catch (MissingResourceException e) {
            throw new RuntimeException("Oops..resource bundle "
                    + e.getClassName() + " not found.");
        }
        this.preferences = new PreferencesClient(baseClient);
        this.initComponents();
        this.initializeHelp();
    }

    private void initializeHelp() {
    }

    /**
     * Sets new preferences to this panel to changes/modify
     */
    @Override
    public void loadPreferences() {
        this.jCheckBoxShowHttpHeader.setSelected(
                this.preferences.getBoolean(PreferencesAS2.SHOW_HTTPHEADER_IN_PARTNER_CONFIG));
        this.jCheckBoxCEM.setSelected(
                this.preferences.getBoolean(PreferencesAS2.CEM));
        this.jCheckBoxOutboundStatusFiles.setSelected(
                this.preferences.getBoolean(PreferencesAS2.WRITE_OUTBOUND_STATUS_FILE));
        this.jCheckBoxDisplaySecurityOverwriteLocalstation.setSelected(
                this.preferences.getBoolean(PreferencesAS2.SHOW_OVERWRITE_LOCALSTATION_SECURITY_IN_PARTNER_CONFIG));
        this.preferencesStrAtLoadTime = this.captureSettingsToStr();
    }

    /**Helper method to find out if there are changes in the GUI before storing them to the server*/
    private String captureSettingsToStr(){
        StringBuilder builder = new StringBuilder();
        builder.append( PreferencesAS2.SHOW_HTTPHEADER_IN_PARTNER_CONFIG ).append("=")
                .append( this.jCheckBoxShowHttpHeader.isSelected()).append(";");
        builder.append( PreferencesAS2.CEM ).append("=")
                .append( this.jCheckBoxCEM.isSelected()).append(";");
        builder.append( PreferencesAS2.WRITE_OUTBOUND_STATUS_FILE ).append("=")
                .append( this.jCheckBoxOutboundStatusFiles.isSelected()).append(";");
        builder.append( PreferencesAS2.SHOW_OVERWRITE_LOCALSTATION_SECURITY_IN_PARTNER_CONFIG ).append("=")
                .append( this.jCheckBoxDisplaySecurityOverwriteLocalstation.isSelected()).append(";");
        return( builder.toString() );
    }
    
    
    @Override
    public boolean preferencesAreModified() {
        return( !this.preferencesStrAtLoadTime.equals(this.captureSettingsToStr()) );
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelSpace = new javax.swing.JPanel();
        jCheckBoxCEM = new javax.swing.JCheckBox();
        jCheckBoxOutboundStatusFiles = new javax.swing.JCheckBox();
        jPanelSpace123 = new javax.swing.JPanel();
        jPanelSpace124 = new javax.swing.JPanel();
        jPanelHTTPHeader = new javax.swing.JPanel();
        jCheckBoxShowHttpHeader = new javax.swing.JCheckBox();
        jPanelUIHelpShowHTTPHeader = new de.mendelson.util.balloontip.JPanelUIHelp();
        jPanelSpace334 = new javax.swing.JPanel();
        jPanelPverwriteLocalstationSecurity = new javax.swing.JPanel();
        jCheckBoxDisplaySecurityOverwriteLocalstation = new javax.swing.JCheckBox();
        jPanelUIHelpOverwriteLocalstationSecurity = new de.mendelson.util.balloontip.JPanelUIHelp();
        jPanel1 = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        add(jPanelSpace, gridBagConstraints);

        jCheckBoxCEM.setText(this.rb.getResourceString( "label.cem" ));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jCheckBoxCEM, gridBagConstraints);

        jCheckBoxOutboundStatusFiles.setText(this.rb.getResourceString( "label.outboundstatusfiles" ));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jCheckBoxOutboundStatusFiles, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPanelSpace123, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPanelSpace124, gridBagConstraints);

        jPanelHTTPHeader.setLayout(new java.awt.GridBagLayout());

        jCheckBoxShowHttpHeader.setText(this.rb.getResourceString( "label.showhttpheader" ));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelHTTPHeader.add(jCheckBoxShowHttpHeader, gridBagConstraints);

        jPanelUIHelpShowHTTPHeader.setToolTipText(this.rb.getResourceString( "label.showhttpheader.help" ));
        jPanelUIHelpShowHTTPHeader.setPreferredSize(new java.awt.Dimension(20, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanelHTTPHeader.add(jPanelUIHelpShowHTTPHeader, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        jPanelHTTPHeader.add(jPanelSpace334, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(jPanelHTTPHeader, gridBagConstraints);

        jPanelPverwriteLocalstationSecurity.setLayout(new java.awt.GridBagLayout());

        jCheckBoxDisplaySecurityOverwriteLocalstation.setText(this.rb.getResourceString( "label.showsecurityoverwrite" ));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelPverwriteLocalstationSecurity.add(jCheckBoxDisplaySecurityOverwriteLocalstation, gridBagConstraints);

        jPanelUIHelpOverwriteLocalstationSecurity.setToolTipText(this.rb.getResourceString( "label.showsecurityoverwrite.help" ));
        jPanelUIHelpOverwriteLocalstationSecurity.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanelUIHelpOverwriteLocalstationSecurity.setTooltipWidth(350);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        jPanelPverwriteLocalstationSecurity.add(jPanelUIHelpOverwriteLocalstationSecurity, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        jPanelPverwriteLocalstationSecurity.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        add(jPanelPverwriteLocalstationSecurity, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBoxCEM;
    private javax.swing.JCheckBox jCheckBoxDisplaySecurityOverwriteLocalstation;
    private javax.swing.JCheckBox jCheckBoxOutboundStatusFiles;
    private javax.swing.JCheckBox jCheckBoxShowHttpHeader;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelHTTPHeader;
    private javax.swing.JPanel jPanelPverwriteLocalstationSecurity;
    private javax.swing.JPanel jPanelSpace;
    private javax.swing.JPanel jPanelSpace123;
    private javax.swing.JPanel jPanelSpace124;
    private javax.swing.JPanel jPanelSpace334;
    private de.mendelson.util.balloontip.JPanelUIHelp jPanelUIHelpOverwriteLocalstationSecurity;
    private de.mendelson.util.balloontip.JPanelUIHelp jPanelUIHelpShowHTTPHeader;
    // End of variables declaration//GEN-END:variables

    @Override
    public void savePreferences() {
        this.preferences.putBoolean(PreferencesAS2.SHOW_HTTPHEADER_IN_PARTNER_CONFIG, 
                this.jCheckBoxShowHttpHeader.isSelected());
        this.preferences.putBoolean(PreferencesAS2.CEM, 
                this.jCheckBoxCEM.isSelected());
        this.preferences.putBoolean(PreferencesAS2.WRITE_OUTBOUND_STATUS_FILE, 
                this.jCheckBoxOutboundStatusFiles.isSelected());
        this.preferences.putBoolean(PreferencesAS2.SHOW_OVERWRITE_LOCALSTATION_SECURITY_IN_PARTNER_CONFIG, 
                this.jCheckBoxDisplaySecurityOverwriteLocalstation.isSelected());
    }

    @Override
    public ImageIcon getIcon() {
        return (new ImageIcon(IMAGE_INTERFACE.toMinResolution(JDialogPreferences.IMAGE_HEIGHT)));
    }

    @Override
    public String getTabResource() {
        return ("tab.interface");
    }

}
